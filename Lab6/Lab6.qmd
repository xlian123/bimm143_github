---
title: "Lab 6"
author: "Xiaoyu Lian (A17025943)"
format: pdf
editor: visual
---

Today we are going to explore R functions and begin to think about writting our own functions.

Let's start simple and write our first function to add some numbers.

Every function in R has at least 3 things:

-   a **name**, we pick this
-   one or more input **arguments**
-   the **body**, where the work gets done.

```{r}
add <- function (x,y=1, z=0) {x+y}
```

Try

```{r}
add(10,1)
```

```{r}
add (x = c(10,1,1,10), y=1)
add(10,10)
add(10,10,10)
```

```{r}
#add('Lorraine')
```

#Lab 6
>Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```
begin by calculating the average for student
```{r}
mean(student1)
mean(student2, na.rm = TRUE)
mean(student3, na.rm = TRUE)
```
need to deal with the NA score later
drop the lowest score from a given student
1. use `min()` and `which.min()` function 
```{r}
min(student1)
#find the location of the min value not the value itself, use which.min()
which.min(student1)
#put together
student1[-which.min(student1)]
```
what if there're more than one equally low score
```{r}
a <- c(100,90,100,90,100,100)
which.min(a)
a[-which.min(a)]
```
```{r}
removelow <- function(studentid){studentid[-which.min(studentid)]}
removelow(student1)
```
how to deal with NA value?
one is make NA equal to zero
```{r}
student2
#is.na set NA value to true, ! is to flip the logical, let true-->false
is.na(student2)
student2[is.na(student2)]
!is.na(student2)
#find the NA value and make it 0
student2[is.na(student2)]<-0
```

```{r}
#generalize the function()
grade <- function(studentid){
  #find NAs and make them 0
  studentid[is.na(studentid)] <- 0
  #drop lowest value and find mean
  mean(studentid[-which.min(studentid)])
}

grade(student1)
grade(student2)
grade(student3)
```

```{r}
grade_book <- read.csv("https://tinyurl.com/gradeinput",
                        row.names = 1)
grade_book
```
To use the `apply()` function on this `grade_book` data set, I need to decide whether I want to apply to the `grade()` function over the rows (1) or columns (2) of the `grade_book`
```{r}
#apply(X, margin, function), x= data, margin: 1= row, 2 = column
mean_student <- apply(grade_book, 1, grade)
mean_student
```
>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
mean_student[which.max(mean_student)]
```
>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
#this will drop the lowest score 
#mean_hw <- apply(grade_book,2,grade)
#mean_hw[which.min(mean_hw)]
apply(grade_book, 2, mean, na.rm = T)
masked_gradebook <- grade_book
masked_gradebook[is.na(masked_gradebook)] = 0
apply(masked_gradebook, 2, mean)
```
I can modify `grade()` function to do this too -ie not drop the lowest options
```{r}
#generalize the function()
grade <- function(studentid, drop.low = TRUE){
  studentid[is.na(studentid)] <- 0
  if(drop.low){output <- mean(studentid[-which.min(studentid)])}
  else{output <- mean(studentid)}
  return(output)
}
grade(student2, TRUE)
grade(student2, FALSE)
```

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? 

The function to calculate correlation in R is called `cor()`
```{r}
x <- c(100, 90, 80, 100)
y <- c(100, 90, 80, 100)
z <- c(80, 90, 100, 10)
cor(x,y)
cor(x,z)
```
```{r}
cor(mean_student, masked_gradebook)
```
if want to use `apply()` function over the `masked_gradebook` and use the `mean_student` scores for the class
```{r}
apply(masked_gradebook, 2, cor, y = mean_student)
```

